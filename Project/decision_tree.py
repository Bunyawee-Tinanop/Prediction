# -*- coding: utf-8 -*-
"""Decision tree.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y87Sda1KMOyV5dpAKLJQwUkSIP-eGGm0
"""

##แบ่งข้อมูล criterion = entropy  และ max_depth = 5
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score


data = pd.read_csv('/content/drive/MyDrive/healthcare-dataset-stroke-data.csv')
data.head()

# Separate features (X) and target variable (y)
X = data.drop('stroke', axis=1)  # Drop the 'stroke' column (target variable)
X = X[['gender','age','hypertension','heart_disease','ever_married','avg_glucose_level','bmi']]
y = data['stroke']  # Target variable

# Split data into training and testing sets (adjust test_size as needed)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a decision tree classifier
DT_model = DecisionTreeClassifier(criterion='entropy', max_depth=5)

# Train the decision tree on the training set
DT_model.fit(X_train, y_train)

# Make predictions on the testing set
y_pred = DT_model.predict(X_test)

# Evaluate the accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.4f}")

#แบ่งข้อมูล criterion = log_loss  และ max_depth = 5
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score


data = pd.read_csv('/content/drive/MyDrive/healthcare-dataset-stroke-data.csv')
data.head()

# Separate features (X) and target variable (y)
X = data.drop('stroke', axis=1)  # Drop the 'stroke' column (target variable)
X = X[['gender','age','hypertension','heart_disease','ever_married','avg_glucose_level','bmi']]
y = data['stroke']  # Target variable

# Split data into training and testing sets (adjust test_size as needed)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a decision tree classifier
DT_model = DecisionTreeClassifier(criterion='log_loss', max_depth=5)

# Train the decision tree on the training set
DT_model.fit(X_train, y_train)

# Make predictions on the testing set
y_pred = DT_model.predict(X_test)

# Evaluate the accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.4f}")